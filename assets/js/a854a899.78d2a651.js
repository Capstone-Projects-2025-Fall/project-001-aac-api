"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3374],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>n});var o=i(96540);const a={},s=o.createContext(a);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:t},e.children)}},35192:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"requirements/system-overview","title":"System Overview","description":"Project Abstract","source":"@site/docs/requirements/system-overview.md","sourceDirName":"requirements","slug":"/requirements/system-overview","permalink":"/project-001-aac-api/docs/requirements/system-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-aac-api/edit/main/documentation/docs/requirements/system-overview.md","tags":[],"version":"current","lastUpdatedBy":"Jess","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Requirements Specification","permalink":"/project-001-aac-api/docs/category/requirements-specification"},"next":{"title":"System Block Diagram","permalink":"/project-001-aac-api/docs/requirements/system-block-diagram"}}');var a=i(74848),s=i(28453);const r={sidebar_position:1},n="System Overview",c={},l=[{value:"Project Abstract",id:"project-abstract",level:2},{value:"Conceptual Design",id:"conceptual-design",level:2},{value:"Background",id:"background",level:2}];function d(e){const t={h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"system-overview",children:"System Overview"})}),"\n",(0,a.jsx)(t.h2,{id:"project-abstract",children:"Project Abstract"}),"\n",(0,a.jsx)(t.p,{children:"This document proposes an application programming interface (API) that supports AAC games. The API will allow users to play AAC games like StoryQuest through external AAC board interaction, rather than being forced to rely on an embedded AAC board in the game. Users can relay game inputs by either speaking with their mouths or speaking through their AAC board. The API will enable audio-controlled games, which will support social and communication skills in children who use AAC devices by enabling AAC users to play games alongside non-AAC users."}),"\n",(0,a.jsx)(t.h2,{id:"conceptual-design",children:"Conceptual Design"}),"\n",(0,a.jsx)(t.p,{children:"Our proposed solution is a client side JS API designed for integration into existing and newly developed web based AAC Board designed games. The core of the API will leverage standard browser tech, making sure that we have broad compatibility and not having the brunt of service side processing or cloud expenses. The tool for converting the audio from an AAC device into text will be the Web Speech API, which is natively supported by most browsers. To address the challenge of voice isolation in potential noisy environments like a clinic, we will process the audio from the microphone before it reaches the transcription API. This will be accomplished using Web Audio API which allows you to work with audio streams. Next it would pass through RNNoise which allows for client side noise suppression which would help eliminate ambient noise and other voices from the one we actually want to hear. The API will be structured to be highly reusable, a game developer will simply include/import our script and initialize it with a  config object that would act as a user defined \u201cdictionary\u201d of specific spoken words or phrases (eg \u201cjump\u201d, \u201cstart game\u201d) that maps to callback functions. This would allow developers to easily add AAC device compatibility without modifying their core game logic."}),"\n",(0,a.jsx)(t.h2,{id:"background",children:"Background"}),"\n",(0,a.jsx)(t.p,{children:"Augmentative and Alternative Communication (AAC) devices are essential tools that provide a voice to individuals with significant speech impairments, these stem from conditions like autism spectrum disorder, cerebral palsy, or ALS. These devices allow users to express their needs, thoughts, feelings, and much more. However, while very effective for communication, their use in dynamic, fast paced environments like video games is all but none. This often can lead to a frustrating experience or social exclusion. The goal is to make games with these users in mind to help foster the idea of being able to fit in and not have to put the AAC device down. Our project aims to bridge the gap by creating an API that would allow users to participate in web based games using their AAC device that they are already comfortable and proficient with. The current approach within this target of games is using a simulated AAC board on a secondary device, like an iPad. While this is a functional solution, it forces users to learn a new, game specific interface rather than using their already familiar device. This project directly improves upon that model by allowing for direct input from the user's own device. Other projects like the reimagined Hungry Hungry Hippo game, have successfully created a new experience for AAC users. These are valuable contributions but often give developers of these games extra work and development cycles to implement a board into their games. Rather than building a new game, we are creating a reusable and universal tool that any developer can use to easily integrate into their existing or future web games. Our API is being specifically designed to solve the difficult problem of isolating an AAC voice from the background noise of a clinic or classroom, making it an application of voice recognition technology aimed squarely at allowing AAC users to play how they most comfortably can."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);