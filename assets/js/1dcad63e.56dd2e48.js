"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2994],{28040:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/Use_Case_9-aa0eb02553f6ae436e42fd5d3a809cf4.png"},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(96540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},53800:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"system-architecture/sequence-diagrams","title":"Use-case descriptions","description":"Use Case 1 - Voice Recognition","source":"@site/docs/system-architecture/sequence-diagrams.md","sourceDirName":"system-architecture","slug":"/system-architecture/sequence-diagrams","permalink":"/project-001-aac-api/docs/system-architecture/sequence-diagrams","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-aac-api/edit/main/documentation/docs/system-architecture/sequence-diagrams.md","tags":[],"version":"current","lastUpdatedBy":"Jess","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"Development Environment","permalink":"/project-001-aac-api/docs/system-architecture/development-environment"},"next":{"title":"Version Control","permalink":"/project-001-aac-api/docs/system-architecture/version-control"}}');var t=s(74848),o=s(28453);const r={sidebar_position:5},a="Use-case descriptions",l={},c=[{value:"Use Case 1 - Voice Recognition",id:"use-case-1---voice-recognition",level:3},{value:"Use Case 2 - Filter Out Filler Words",id:"use-case-2---filter-out-filler-words",level:3},{value:"Use Case 3 - Speaker Seperation",id:"use-case-3---speaker-seperation",level:3},{value:"Use Case 4 - Background Noise Filtering",id:"use-case-4---background-noise-filtering",level:3},{value:"Use Case 5 - Interpret Synonyms of Commands",id:"use-case-5---interpret-synonyms-of-commands",level:3},{value:"Use Case 6 - Support Commmon Game Inputs (Incomplete)",id:"use-case-6---support-commmon-game-inputs-incomplete",level:3},{value:"Use Case 7 - Previous Game Integration",id:"use-case-7---previous-game-integration",level:3},{value:"Use Case 8 - Register New Commands",id:"use-case-8---register-new-commands",level:3},{value:"Use Case 9 - Toggle Input History",id:"use-case-9---toggle-input-history",level:3},{value:"Use Case 10 - Confidence Level of Interpreted Game Input",id:"use-case-10---confidence-level-of-interpreted-game-input",level:3}];function d(e){const n={h1:"h1",h3:"h3",header:"header",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"use-case-descriptions",children:"Use-case descriptions"})}),"\n",(0,t.jsx)(n.h3,{id:"use-case-1---voice-recognition",children:"Use Case 1 - Voice Recognition"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Suzy (player / AAC device user)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering event: Suzy opens a supported game and taps the in-game microphone icon (or activates mic)."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: Game is running and in a state that accepts the Start command; microphone access is granted; network (if required) is available."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow (happy path):"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Suzy taps the microphone icon."}),"\n",(0,t.jsx)(n.li,{children:"System checks microphone level and readiness."}),"\n",(0,t.jsx)(n.li,{children:"System begins listening and records the utterance."}),"\n",(0,t.jsx)(n.li,{children:"ASR (speech\u2192text) transcribes the audio."}),"\n",(0,t.jsx)(n.li,{children:"The transcribed text is normalized and matched to the command set; the text maps to the StartGame command."}),"\n",(0,t.jsx)(n.li,{children:"If the command confidence is high, the API sends the StartGame command to the game."}),"\n",(0,t.jsx)(n.li,{children:"The game changes to the playing state and the UI shows confirmation (visual cue like \u201cGame started\u201d)."}),"\n",(0,t.jsx)(n.li,{children:"The event is logged in command history."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Low mic level: show prompt \u201cPlease increase mic volume / move closer to the device\u201d"}),"\n",(0,t.jsx)(n.li,{children:"Low confidence: show prompt \u201cCould you say that again?\u201d \u2192 re-listen one retry; if still low, show \u201cTry again later\u201d or offer manual control."}),"\n",(0,t.jsx)(n.li,{children:"Network error: show \u201cUnable to process voice now\u201d and fallback to manual start."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: Game has started (or appropriate error/feedback displayed); command logged."}),"\n",(0,t.jsx)(n.mermaid,{value:"{% include img/UserFlow1SequenceDiagram.mmd %}"}),"\n",(0,t.jsx)(n.h3,{id:"use-case-2---filter-out-filler-words",children:"Use Case 2 - Filter Out Filler Words"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Suzy (player)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering event: Suzy speaks while playing, e.g., \u201cuh jump now.\u201d"}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: Game is in a state that accepts gameplay commands; microphone is active."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The system captures Suzy\u2019s voice."}),"\n",(0,t.jsx)(n.li,{children:"ASR transcribes the audio into text (e.g., \u201cuh jump now\u201d)."}),"\n",(0,t.jsx)(n.li,{children:"The pipeline runs a filler-word filter and removes tokens like \u201cuh\u201d, \u201cum\u201d, \u201cnow\u201d."}),"\n",(0,t.jsx)(n.li,{children:"Remaining tokens are tokenized and mapped to command(s) (e.g., \u201cjump\u201d \u2192 Jump)."}),"\n",(0,t.jsx)(n.li,{children:"If mapping confidence is high, the API issues the Jump action to the game immediately."}),"\n",(0,t.jsx)(n.li,{children:"UI gives immediate feedback (visual cue + animation) and logs the command."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Filter removes all meaningful words (e.g., utterance was \u201cuh now\u201d): ask the player to repeat."}),"\n",(0,t.jsx)(n.li,{children:"Multiple possible commands: request quick confirmation (\u201cDid you mean JUMP?\u201d) or choose highest-confidence and log uncertainty."}),"\n",(0,t.jsx)(n.li,{children:"Low confidence: prompt for repeat."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: Jump action executed (or user prompted to repeat); command history updated."}),"\n",(0,t.jsx)(n.mermaid,{value:"{% include img/UserFlow2SequenceDiagram.mmd %}"}),"\n",(0,t.jsx)(n.h3,{id:"use-case-3---speaker-seperation",children:"Use Case 3 - Speaker Seperation"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Suzy (primary player) and nearby non-player speakers (e.g., parent)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering event: Suzy speaks a command while other people speak at the same time."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: Enrolled player voice profile exists; speaker-separation model is enabled."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"System captures mixed audio with multiple speakers."}),"\n",(0,t.jsx)(n.li,{children:"The speaker-separation model isolates the enrolled player\u2019s audio stream (prefer enrolled stream)."}),"\n",(0,t.jsx)(n.li,{children:"ASR runs on the isolated player stream and transcribes the utterance."}),"\n",(0,t.jsx)(n.li,{children:"Transcription is normalized and mapped to a game command (e.g., PauseGame)."}),"\n",(0,t.jsx)(n.li,{children:"If confidence is high, API sends PauseGame to the game; UI confirms action."}),"\n",(0,t.jsx)(n.li,{children:"Log command and speaker attribution."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"No enrolled profile available"}),"\n",(0,t.jsx)(n.li,{children:"Separation uncertain / low confidence: show a quick confirmation prompt (\u201cDid you say \u2018pause\u2019?\u201d). If the player confirms, proceed; otherwise ignore."}),"\n",(0,t.jsx)(n.li,{children:"Overlapping identical words from multiple speakers: use confidence + enrolled preference; if unresolved, request confirmation."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: Game paused (if confirmed); system records speaker attribution and confidence."}),"\n",(0,t.jsx)(n.mermaid,{value:"{% include img/UserFlow3SequenceDiagram.mmd %}"}),"\n",(0,t.jsx)(n.h3,{id:"use-case-4---background-noise-filtering",children:"Use Case 4 - Background Noise Filtering"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Suzy (player)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering event: Suzy issues a command in a noisy environment (e.g., TV)."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: Noise-robust ASR / denoising pipeline active; microphone picks up signal."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"System captures the noisy audio."}),"\n",(0,t.jsx)(n.li,{children:"Noise suppression/denoising module processes the audio to reduce background interference."}),"\n",(0,t.jsx)(n.li,{children:"ASR transcribes the cleaned audio."}),"\n",(0,t.jsx)(n.li,{children:"Transcription is matched to a command (e.g., \u201cleft\u201d \u2192 MoveLeft)."}),"\n",(0,t.jsx)(n.li,{children:"If confidence is high, API sends MoveLeft to the game and UI shows visual confirmation."}),"\n",(0,t.jsx)(n.li,{children:"Command and environment metadata (noise level) are logged."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Noise overwhelms voice: prompt the user to repeat or show a \u201ccan\u2019t hear\u201d note."}),"\n",(0,t.jsx)(n.li,{children:"Misrecognized phrase due to residual noise: if confidence low, ask for repeat or confirmation."}),"\n",(0,t.jsx)(n.li,{children:"Adaptive fallback: optionally switch to a push-to-talk or require closer mic."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: Movement executed (or prompt shown); noise metrics recorded for debugging."}),"\n",(0,t.jsx)(n.h3,{id:"use-case-5---interpret-synonyms-of-commands",children:"Use Case 5 - Interpret Synonyms of Commands"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Suzy (player); Developer (configures mapping)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering event: Suzy uses a synonym (e.g., \u201cgo\u201d for Move, \u201chop\u201d for Jump)."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: Synonym mapping table exists (configured by developer or default set); ASR and command mapper active."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"System captures the utterance and ASR produces text (e.g., \u201chop\u201d)."}),"\n",(0,t.jsx)(n.li,{children:"The command-mapping module looks up the token in the synonym table."}),"\n",(0,t.jsx)(n.li,{children:"\u201chop\u201d is mapped to canonical command Jump."}),"\n",(0,t.jsx)(n.li,{children:"If confidence is high, API issues Jump to the game."}),"\n",(0,t.jsx)(n.li,{children:"Provide visual confirmation and log synonym used and mapping confidence."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Unknown synonym: present developer UI option to register this phrase as a synonym, or prompt the player: \u201cDid you mean JUMP?\u201d"}),"\n",(0,t.jsx)(n.li,{children:"Multiple possible canonical matches: prompt for confirmation or use highest confidence mapping."}),"\n",(0,t.jsx)(n.li,{children:"Developer disabled synonym mapping: treat unknown words as unrecognized and prompt to repeat or register command."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: Correct canonical command executed or developer/user receives a prompt to resolve ambiguity."}),"\n",(0,t.jsx)(n.h3,{id:"use-case-6---support-commmon-game-inputs-incomplete",children:"Use Case 6 - Support Commmon Game Inputs (Incomplete)"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Steven (developer)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering Event: Steven uses the API toolkit to set up the basic commands the game will understand."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: Game API has empty command library."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Steven, a game developer, uses the API toolkit, like Start Game, Move Left, Move Right, Jump, Pause, and Shield."}),"\n",(0,t.jsx)(n.li,{children:"They tell the API what each command means and connect those commands to the game\u2019s actions. When a player speaks, the API listens, figures out the right command, and sends it back to the game in a clear format."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: System contains common commands in a command library."}),"\n",(0,t.jsx)(n.h3,{id:"use-case-7---previous-game-integration",children:"Use Case 7 - Previous Game Integration"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Steven (developer)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering Event: Suzy wants to play an AAC game she used last semester."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: System supports current AAC games."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The developer adds a small connector that uses the API\u2019s standard commands."}),"\n",(0,t.jsx)(n.li,{children:"Suzy\u2019s voice inputs still work in the old game without needing to rewrite the code."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The old game is set up in a way that is not compatible with the API."}),"\n",(0,t.jsx)(n.li,{children:"The old game's code needs to be directly modified."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: Suzy is able to play the old AAC games using the API."}),"\n",(0,t.jsx)(n.h3,{id:"use-case-8---register-new-commands",children:"Use Case 8 - Register New Commands"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Steven (developer)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering Event: Steven adds new commands to command library through the API to support new game."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: System command library has common commands in command library."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"System has the ability to register new commands through the API."}),"\n",(0,t.jsx)(n.li,{children:"Steven enters new commands in command library using the API toolkit."}),"\n",(0,t.jsx)(n.li,{children:"This will allow the API to remain flexible to any future games that require more complex commands that are not currently supported."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The system command log already contains all the needed commands for the game."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: All commands for the AAC game are entered in the command library, and can be used by players through the API."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(60081).A+"",width:"1110",height:"980"})}),"\n",(0,t.jsx)(n.h3,{id:"use-case-9---toggle-input-history",children:"Use Case 9 - Toggle Input History"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Steven (developer); Stan (player)"}),"\n",(0,t.jsx)(n.p,{children:"Triggering Event: Stan is overstimulated by the AAC game."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: AAC game is running API and game command history is visible to players."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Stan's caretaker uses the API window and goes to settings."}),"\n",(0,t.jsx)(n.li,{children:"The system has toggleable settings for input history."}),"\n",(0,t.jsx)(n.li,{children:"The caretaker toggles off the input history."}),"\n",(0,t.jsx)(n.li,{children:"Stan receives reduced visual stimuli and can comfortably enjoy playing the AAC game."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Steven has registered a new command and uses the command history to troubleshoot the new command."}),"\n",(0,t.jsx)(n.li,{children:"He has confidence that it was registered correctly and working once he is able to see it in the command history."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: AAC game is playable without a visible command history."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(28040).A+"",width:"1120",height:"1539"})}),"\n",(0,t.jsx)(n.h3,{id:"use-case-10---confidence-level-of-interpreted-game-input",children:"Use Case 10 - Confidence Level of Interpreted Game Input"}),"\n",(0,t.jsx)(n.p,{children:"Actor: Steven (developer):"}),"\n",(0,t.jsx)(n.p,{children:"Triggering Event: Steven is experimenting with API speech input."}),"\n",(0,t.jsx)(n.p,{children:"Preconditions: Game is in a state that accepts gameplay commands; microphone is active."}),"\n",(0,t.jsx)(n.p,{children:"Normal flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Steven speaks game commands into the microphone."}),"\n",(0,t.jsx)(n.li,{children:"The game command is interpreted and inputed to the game."}),"\n",(0,t.jsx)(n.li,{children:"Steven receives a confidence level from the API that determines how confident the API was in choosing that command based on synonyms to a known command."}),"\n",(0,t.jsx)(n.li,{children:"This allows him to have control over which commands are recognized as valid game inputs. ensuring that only reliable commands can affect the gameplay."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Alternate flows / exceptions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The game incorrectly interprets the voice input."}),"\n",(0,t.jsx)(n.li,{children:"Steven adjusts the code accordingly."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Postconditions: Gam e accurately interprets gameplay commands."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(66754).A+"",width:"1051",height:"1164"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},60081:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/Use_Case_8-028504ed6a270716ef88fb96f89f5924.png"},66754:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/Use_Case_10-926d63d81928a91eeb62fce6d679e2b2.png"}}]);